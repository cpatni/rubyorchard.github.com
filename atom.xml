<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Chandra Patni]]></title>
  <link href="http://rubyorchard.github.com/atom.xml" rel="self"/>
  <link href="http://rubyorchard.github.com/"/>
  <updated>2012-04-22T18:10:19-07:00</updated>
  <id>http://rubyorchard.github.com/</id>
  <author>
    <name><![CDATA[Chandra Patni]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Object Notations beyond JavaScript]]></title>
    <link href="http://rubyorchard.github.com/blog/2012/01/01/object-notations-beyond-javascript/"/>
    <updated>2012-01-01T00:22:00-08:00</updated>
    <id>http://rubyorchard.github.com/blog/2012/01/01/object-notations-beyond-javascript</id>
    <content type="html"><![CDATA[<p>JavaScript Object Notation is a data interchange format based on JavaScript object literals. The beauty of JSON is in identifying a set of data type literals of language that are safe and useful for data interchange. For instance the following snippet represents a valid JavaScript but it&#8217;s unsafe for data interchange and is invalid JSON.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span><span class="s2">&quot;body&quot;</span> <span class="o">:</span> <span class="s2">&quot;Chunky &quot;</span> <span class="o">+</span> <span class="s2">&quot;Bacon&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the the other hand, the example below is using String literal and is valid JSON.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span><span class="s2">&quot;body&quot;</span> <span class="o">:</span> <span class="s2">&quot;Chunky Bacon&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This simple idea goes a long way. Instead of defining our own format for data interchange, we are using subset of a language for exchanging objects by computer programs and since it&#8217;s represented in JavaScript, it&#8217;s easy to understand. Once you think about safety, it&#8217;s intuitive to see the subset of language constructs useful for data interchange.</p>

<p>The idea behind JSON employing JavaScript is analogous to REST employing HTTP. This makes JSON natural format for RESTful services and typically RESTful services provide data in JSON and XML formats. However, often working with Ruby and PHP, I find neither JSON nor XML, particularly enjoyable for hacking services. I would much prefer REST services data in the native format of language I am working with. From service provider point of view, it&#8217;s worthwhile to target other dynamic languages with rich set of object literals like Ruby, PHP, Python, etc. This leads to the generalization of Object Notations which involves identifying a set of literals and using them for data interchange. For instance the Ruby and PHP Object Notations for above snippet can be represented as:</p>

<p>Ruby Object Notation:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="ss">:body</span> <span class="o">=&gt;</span> <span class="s2">&quot;Chunky Bacon&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>PHP Object Notation:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">array(&quot;body&quot; =&gt; &quot;Chunky Bacon&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Service provider who provide formats like XML and JSON,</p>

<ul>
<li>http://api.example.com/posts/1.json</li>
<li>http://api.example.com/posts/1.xml</li>
</ul>


<p>should also consider other object notations like:</p>

<ul>
<li>http://api.example.com/posts/1.rbon</li>
<li>http://api.example.com/posts/1.phpon</li>
<li>http://api.example.com/posts/1.pyon</li>
</ul>


<p>Object notation with padding is the generalization of JSONP where the Object Notation is passed as argument to a specified function which allows programming REST easier than just returning them as values. For RESTful services, JSON and other object notations are better fit than XML. For an example in action, check out <a href="http://github.com/rubyorchard/geoip-rest">http://github.com/rubyorchard/geoip-rest</a> for GeoIP City and Country REST APIs which offer object notation in Ruby, PHP, JSON and XML formats.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lint conjecture]]></title>
    <link href="http://rubyorchard.github.com/blog/2011/12/27/lint-conjecture/"/>
    <updated>2011-12-27T17:10:00-08:00</updated>
    <id>http://rubyorchard.github.com/blog/2011/12/27/lint-conjecture</id>
    <content type="html"><![CDATA[<blockquote><p>For any static code analyzer tool, one should be able to write a *Script language, which generates the code to satisfy the static code analyzer.</p></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bitten by JavaScript Function Scope, Once Again]]></title>
    <link href="http://rubyorchard.github.com/blog/2011/12/13/bitten-by-Javascript-function-scope/"/>
    <updated>2011-12-13T21:21:00-08:00</updated>
    <id>http://rubyorchard.github.com/blog/2011/12/13/bitten-by-Javascript-function-scope</id>
    <content type="html"><![CDATA[<p>Even if you are careful, JavaScript function scope will bite you. Often times, when you are expecting them least. Today, I ran into it after some refactoring. Here is the setup.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;url&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//....</span>
</span><span class='line'><span class="c1">// a lot of code here</span>
</span><span class='line'><span class="c1">//....</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">do_something</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="s2">&quot;http://blog.cpatni.com/&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">url</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="s2">&quot;/about&quot;</span><span class="p">));</span> <span class="c1">//expected http://blog.cpatni.com/about</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//....</span>
</span><span class='line'>  <span class="c1">//a lot of code here</span>
</span><span class='line'>  <span class="c1">//....</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">urls</span> <span class="o">=</span> <span class="p">{</span><span class="nx">url1</span><span class="o">:</span> <span class="s2">&quot;http://localhost/&quot;</span><span class="p">};</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">url</span> <span class="k">in</span> <span class="nx">urls</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we call <code>do_something()</code>, we get following error on <em>line 7</em>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TypeError: Cannot call method 'resolve' of undefined</span></code></pre></td></tr></table></div></figure>


<p>What happend here was that the <code>var url</code> on <em>line 13</em>, is in scope and is <code>undefined</code> on <em>line 7</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TextMate 2 Screenshots]]></title>
    <link href="http://rubyorchard.github.com/blog/2011/12/13/textmate-2-screenshots/"/>
    <updated>2011-12-13T09:21:00-08:00</updated>
    <id>http://rubyorchard.github.com/blog/2011/12/13/textmate-2-screenshots</id>
    <content type="html"><![CDATA[<p>I just tried tinkering with link published on TextMate2 Release Candidate announcement and to my surprise, <a href="http://updates.textmate.org/Application/TextMate_r8930.tbz">r8930</a> worked. Works like a charm for me. Here are some screenshots.</p>

<p>Update: The release is on <a href="http://blog.macromates.com/2011/textmate-2-0-alpha/">TextMate2</a> site now.</p>

<p><img class="left" src="http://rubyorchard.github.com/images/tm2_screenshots/TextMate2-about.png" title="TextMate2 About" >
<img class="left" src="http://rubyorchard.github.com/images/tm2_screenshots/Preferences-terminal.png" title="Perferences Terminal" >
<img class="screenshot" src="http://rubyorchard.github.com/images/tm2_screenshots/Preferences-bundle.png" title="Perferences Bundles" >
<img class="screenshot" src="http://rubyorchard.github.com/images/tm2_screenshots/Filetype-selector.png" title="Filetype-selector" >
<img class="screenshot" src="http://rubyorchard.github.com/images/tm2_screenshots/code1.png" title="CoffeeScript Code" >
<img class="screenshot" src="http://rubyorchard.github.com/images/tm2_screenshots/code2.png" title="CoffeeScript Code" ></p>
]]></content>
  </entry>
  
</feed>
